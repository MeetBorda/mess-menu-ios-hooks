{"version":3,"sources":["firebase/firebase.js","components/DisplayMenu.js","components/Feedback.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","DisplayMenu","props","className","timeOfDay","toUpperCase","style","color","size","split","dataSource","renderItem","item","Item","Feedback","state","visible","valueStored","hide","setState","handleVisibleChange","arrowPointAtCenter","trigger","this","onVisibleChange","content","defaultValue","disabled","onChange","e","StarFilled","Component","App","useState","mealTime","setMealTime","menu","setMenu","loading","setLoading","db","database","fetchData","term","a","meal1","meal","console","log","ref","once","snapshot","value","val","trains","useEffect","time","Date","getHours","display","justifyContent","flexDirection","alignItems","LoadingOutlined","position","top","left","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18dc9df4.chunk.js","sourcesContent":["import firebase from 'firebase'\r\nconst config = {\r\n   apiKey: process.env.apiKey,\r\n   authDomain: \"quantiphi-239fd.firebaseapp.com\",\r\n   databaseURL: \"https://quantiphi-239fd.firebaseio.com\",\r\n   projectId: \"quantiphi-239fd\",\r\n   storageBucket: \"quantiphi-239fd.appspot.com\",\r\n   messagingSenderId: \"1051893397943\",\r\n   appId: \"1:1051893397943:web:ff1891ec6c45b378139032\"\r\n };\r\nfirebase.initializeApp(config);\r\nexport default firebase;","import React from 'react'\r\nimport { List } from 'antd'\r\nimport './DisplayMenu.css'\r\n\r\nfunction DisplayMenu(props) {\r\n\r\n   return (\r\n      <div className='menuStyle'>\r\n         <h1 className={\"headerStyle\"}>{props.timeOfDay.toUpperCase()}</h1>\r\n         <div>\r\n            <List\r\n            style={{color:'red'}}\r\n            size='large'\r\n            split={false}\r\n            dataSource={props.dataSource}\r\n            renderItem={item => <List.Item className={'listStyle'}>{item}</List.Item>}\r\n            />\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default DisplayMenu\r\n\r\n","import React, { Component } from 'react';\r\nimport { StarFilled } from '@ant-design/icons';\r\nimport { Rate, Popover } from 'antd'\r\nimport 'antd/dist/antd.css';\r\nimport './Feedback.css'\r\n\r\nexport default class Feedback extends Component {\r\n  state = { visible: false, valueStored: null }\r\n  hide = () => {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleVisibleChange = visible => {\r\n    this.setState({ visible });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Popover\r\n          arrowPointAtCenter\r\n          trigger=\"click\"\r\n          visible={this.state.visible}\r\n          onVisibleChange={this.handleVisibleChange}\r\n          content={\r\n            this.state.valueStored != null ? \r\n            <Rate className={'rate'} defaultValue={this.state.valueStored} disabled />:\r\n            <Rate className={'rate'} defaultValue={3}\r\n              onChange={(e) => {\r\n                this.setState({ valueStored: e })\r\n                } }\r\n                 />\r\n          }>\r\n          <StarFilled className='star' />\r\n        </Popover>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport firebase from '../src/firebase/firebase'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport DisplayMenu from '../src/components/DisplayMenu'\nimport Feedback from '../src/components/Feedback'\n\nfunction App() {\n  const [mealTime, setMealTime] = useState('');\n  const [menu, setMenu] = useState([])\n  const [loading,setLoading] = useState(true)\n  const db = firebase.database()\n\n  const fetchData = async term => {\n    const meal1 = meal()\n    console.log(meal1)\n    try {\n      const snapshot = await db.ref('/cities/'+meal1).once('value');\n      const value = snapshot.val().trains\n      setMenu(value)\n      setLoading(false)\n    }\n    catch (e) {\n    }\n  }\n  useEffect(() => {\n    fetchData()\n  }, [mealTime])\n\n  const meal = () => {\n    let time = new Date().getHours()\n    if (time >= 10 && time <= 17){\n      setMealTime('mumbai')\n      return 'mumbai'\n    }\n    if (time > 17 && time <= 23){\n      setMealTime('delhi')\n      return 'delhi'\n    }\n    if (time >= 0 && time < 10){\n      setMealTime('indore')\n      return 'indore'\n    }\n    \n  }\n  \n  const renderContent = () =>{\n  return <>\n    <DisplayMenu dataSource={menu} timeOfDay={mealTime} />\n    <Feedback />\n  </>\n  }\n\n  if(loading){\n\n    return(\n      <div className={'loading'} style={{display:'flex',justifyContent:'center',flexDirection: 'column',alignItems: 'center  '}}>\n          <h1 className={'loading'}>Sabra ka fal meetha hota hai</h1>\n          <LoadingOutlined className={'loading'} style={{position:'fixed',top:'50%',left:'50%'}} />\n        </div>\n    )\n  }\n  else{\n    return renderContent()\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      console.log('registered')\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        console.log('YOLO')\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}